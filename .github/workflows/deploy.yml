name: Deploy Firebase Functions

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'Firebase Project ID'
        required: true
        type: string
      service_account_secret_name:
        description: 'Name of the GitHub secret containing the service account JSON'
        required: true
        type: string
        default: 'FIREBASE_SERVICE_ACCOUNT_KEY'
      env_variables:
        description: 'Environment variables (JSON format)'
        required: true
        type: string
      deployment_id:
        description: 'Unique deployment ID for tracking'
        required: true
        type: string
      webhook_url:
        description: 'Webhook URL for status updates (ignored for now)'
        required: false
        type: string
      webhook_secret:
        description: 'Webhook Secret (ignored for now)'
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets[github.event.inputs.service_account_secret_name] }}
        project_id: ${{ github.event.inputs.project_id }}
    
    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
    
    - name: Enable required APIs and setup permissions
      run: |
        echo "üîß Enabling all required APIs..."
        PROJECT_NUMBER=$(gcloud projects describe ${{ github.event.inputs.project_id }} --format="value(projectNumber)")
        echo "Project number: $PROJECT_NUMBER"
        
        # Enable ALL required APIs first (including Compute Engine which was missing)
        echo "üîß Enabling required APIs..."
        gcloud services enable cloudbuild.googleapis.com --project=${{ github.event.inputs.project_id }} || echo "Cloud Build API already enabled"
        gcloud services enable cloudfunctions.googleapis.com --project=${{ github.event.inputs.project_id }} || echo "Cloud Functions API already enabled"
        gcloud services enable artifactregistry.googleapis.com --project=${{ github.event.inputs.project_id }} || echo "Artifact Registry API already enabled"
        gcloud services enable storage.googleapis.com --project=${{ github.event.inputs.project_id }} || echo "Storage API already enabled"
        gcloud services enable eventarc.googleapis.com --project=${{ github.event.inputs.project_id }} || echo "Eventarc API already enabled"
        gcloud services enable pubsub.googleapis.com --project=${{ github.event.inputs.project_id }} || echo "Pub/Sub API already enabled"
        gcloud services enable run.googleapis.com --project=${{ github.event.inputs.project_id }} || echo "Cloud Run API already enabled"
        gcloud services enable compute.googleapis.com --project=${{ github.event.inputs.project_id }} || echo "Compute Engine API already enabled"
        gcloud services enable logging.googleapis.com --project=${{ github.event.inputs.project_id }} || echo "Logging API already enabled"
        gcloud services enable monitoring.googleapis.com --project=${{ github.event.inputs.project_id }} || echo "Monitoring API already enabled"
        
        echo "‚è≥ Waiting 60 seconds for APIs to be fully enabled..."
        sleep 60
        
        # Define the service accounts
        CLOUDBUILD_SA="${PROJECT_NUMBER}@cloudbuild.gserviceaccount.com"
        COMPUTE_SA="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
        FUNCTIONS_SA="service-${PROJECT_NUMBER}@gcf-admin-robot.iam.gserviceaccount.com"
        
        echo "Cloud Build service account: $CLOUDBUILD_SA"
        echo "Compute Engine service account: $COMPUTE_SA"
        echo "Cloud Functions service account: $FUNCTIONS_SA"
        
        echo "üîß Setting up comprehensive permissions..."
        
        # Grant extensive roles to Cloud Build service account
        echo "üîß Granting roles to Cloud Build service account..."
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${CLOUDBUILD_SA}" \
          --role="roles/cloudfunctions.admin" || echo "Cloud Functions Admin role assignment failed"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${CLOUDBUILD_SA}" \
          --role="roles/iam.serviceAccountUser" || echo "IAM Service Account User role assignment failed"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${CLOUDBUILD_SA}" \
          --role="roles/artifactregistry.writer" || echo "Artifact Registry Writer role assignment failed"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${CLOUDBUILD_SA}" \
          --role="roles/storage.admin" || echo "Storage Admin role assignment failed"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${CLOUDBUILD_SA}" \
          --role="roles/eventarc.admin" || echo "Eventarc Admin role assignment failed"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${CLOUDBUILD_SA}" \
          --role="roles/run.admin" || echo "Cloud Run Admin role assignment failed"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${CLOUDBUILD_SA}" \
          --role="roles/compute.networkUser" || echo "Compute Network User role assignment failed"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${CLOUDBUILD_SA}" \
          --role="roles/logging.logWriter" || echo "Logging Writer role assignment failed"
        
        # Grant comprehensive roles to Compute Engine service account
        echo "üîß Granting roles to Compute Engine service account..."
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${COMPUTE_SA}" \
          --role="roles/storage.objectViewer" || echo "Storage Object Viewer role assignment failed"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${COMPUTE_SA}" \
          --role="roles/storage.admin" || echo "Storage Admin role assignment failed"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${COMPUTE_SA}" \
          --role="roles/cloudfunctions.serviceAgent" || echo "Cloud Functions Service Agent role assignment failed"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${COMPUTE_SA}" \
          --role="roles/run.serviceAgent" || echo "Cloud Run Service Agent role assignment failed"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${COMPUTE_SA}" \
          --role="roles/artifactregistry.reader" || echo "Artifact Registry Reader role assignment failed"
        
        # Grant roles to Cloud Functions service account
        echo "üîß Granting roles to Cloud Functions service account..."
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${FUNCTIONS_SA}" \
          --role="roles/storage.objectViewer" || echo "Functions SA Storage Object Viewer role assignment failed"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${FUNCTIONS_SA}" \
          --role="roles/storage.admin" || echo "Functions SA Storage Admin role assignment failed"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${FUNCTIONS_SA}" \
          --role="roles/artifactregistry.reader" || echo "Functions SA Artifact Registry Reader role assignment failed"
        
        # Additional service accounts that might be needed
        EVENTARC_SA="service-${PROJECT_NUMBER}@gcp-sa-eventarc.iam.gserviceaccount.com"
        PUBSUB_SA="service-${PROJECT_NUMBER}@gcp-sa-pubsub.iam.gserviceaccount.com"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${EVENTARC_SA}" \
          --role="roles/eventarc.serviceAgent" || echo "Eventarc SA role assignment failed"
        
        gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \
          --member="serviceAccount:${PUBSUB_SA}" \
          --role="roles/pubsub.serviceAgent" || echo "Pub/Sub SA role assignment failed"
        
        echo "‚úÖ All permission assignments completed"
        echo "‚è≥ Waiting 90 seconds for permissions to propagate..."
        sleep 90
    
    - name: Clean up any existing failed functions
      run: |
        echo "üßπ Checking for and cleaning up any failed function deployments..."
        
        # Check if there are any functions in failed state and delete them
        gcloud functions list --project=${{ github.event.inputs.project_id }} --format="value(name)" || echo "No functions found or error listing functions"
        
        # Try to delete any existing function that might be in a bad state
        echo "üßπ Attempting to clean up any existing testFunction2..."
        gcloud functions delete testFunction2 --region=europe-west2 --project=${{ github.event.inputs.project_id }} --quiet || echo "No testFunction2 to delete or deletion failed"
        
        echo "‚è≥ Waiting 30 seconds after cleanup..."
        sleep 30
    
    - name: Deploy test function first (for new projects)
      run: |
        cd cf
        
        echo "üß™ Preparing simple test function deployment (no env variables)..."
        
        # Verify files exist
        echo "üìÅ Files in cf directory:"
        ls -la
        
        # Install test function dependencies
        echo "üì¶ Installing dependencies..."
        npm install
        
        # Deploy test function with retries
        test_attempt=1
        test_max_attempts=5
        test_success=false
        
        while [ $test_attempt -le $test_max_attempts ] && [ "$test_success" = false ]; do
          echo "============================================"
          echo "üß™ Test function deployment attempt $test_attempt/$test_max_attempts"
          echo "============================================"
          
          set +e
          test_output=$(firebase deploy --only functions --project ${{ github.event.inputs.project_id }} --non-interactive --force 2>&1)
          test_exit_code=$?
          set -e
          
          echo "üìã Test deployment output:"
          echo "$test_output"
          echo "üìã Test exit code: $test_exit_code"
          
          if [ $test_exit_code -eq 0 ]; then
            echo "‚úÖ Test function deployed successfully on attempt $test_attempt"
            test_success=true
          else
            echo "‚ùå Test function deployment failed on attempt $test_attempt"
            
            # Check for specific error patterns
            if echo "$test_output" | grep -i "compute.*engine.*api.*not.*enabled\|compute.*engine.*api.*disabled"; then
              echo "üîç Detected Compute Engine API issue - this should be resolved now"
            elif echo "$test_output" | grep -i "permission.*denied\|access.*denied\|forbidden"; then
              echo "üîç Detected permission issue - waiting longer for propagation"
              sleep 60
            elif echo "$test_output" | grep -i "precondition.*failed\|cannot.*update.*function.*without.*storage"; then
              echo "üîç Detected storage/precondition issue - cleaning up and retrying"
              gcloud functions delete testFunction2 --region=europe-west2 --project=${{ github.event.inputs.project_id }} --quiet || echo "Function deletion failed"
              sleep 30
            fi
            
            if [ $test_attempt -lt $test_max_attempts ]; then
              echo "‚è≥ Waiting 45 seconds before retry..."
              sleep 45
            else
              echo "üí• Test function deployment failed after all attempts"
              echo "Deployment output:"
              echo "$test_output"
              exit 1
            fi
          fi
          
          test_attempt=$((test_attempt + 1))
        done
        
        echo "üéâ Test function deployment successful! Project is warmed up."
        echo "‚è≥ Waiting 30 seconds for project to stabilize..."
        sleep 30