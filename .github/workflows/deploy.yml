name: Deploy Firebase Functions

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'Firebase Project ID'
        required: true
        type: string
      google_account:
        description: 'Google account email (e.g., saqib@dineplatform.com)'
        required: true
        type: string
      env_variables:
        description: 'Environment variables (JSON format)'
        required: true
        type: string
      deployment_id:
        description: 'Unique deployment ID for tracking'
        required: true
        type: string
      webhook_url:
        description: 'Webhook URL for status updates'
        required: false
        type: string
      webhook_secret:
        description: 'Webhook Secret'
        required: false
        type: string
      original_webhook_url:
        description: 'Original webhook URL to forward final results'
        required: false
        type: string
      original_webhook_secret:
        description: 'Original webhook secret'
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Generate secret name from Google account
      run: |
        # Convert email to secret name format
        GOOGLE_ACCOUNT="${{ github.event.inputs.google_account }}"
        SECRET_NAME="key_$(echo "$GOOGLE_ACCOUNT" | sed 's/[^a-zA-Z0-9]/_/g')"
        echo "SECRET_NAME=$SECRET_NAME" >> $GITHUB_ENV
        echo "Generated secret name: $SECRET_NAME"
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets[env.SECRET_NAME] }}
        project_id: ${{ github.event.inputs.project_id }}
    
    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Install Firebase CLI
      run: npm install -g firebase-tools

    - name: Clean up any existing failed functions
      run: |
        echo "🧹 Checking for and cleaning up any failed function deployments..."
        
        # Check if there are any functions in failed state and delete them
        gcloud functions list --project=${{ github.event.inputs.project_id }} --format="value(name)" || echo "No functions found or error listing functions"
        
        # Try to delete any existing function that might be in a bad state
        echo "🧹 Attempting to clean up any existing testFunction2..."
        gcloud functions delete testFunction2 --region=europe-west2 --project=${{ github.event.inputs.project_id }} --quiet || echo "No testFunction2 to delete or deletion failed"
        
        echo "⏳ Waiting 3 seconds after cleanup..."
        sleep 3
    
    - name: Deploy test function first (for new projects)
      run: |
        cd cf
        
        echo "🧪 Preparing simple test function deployment (no env variables)..."
        
        # Verify files exist
        echo "📁 Files in cf directory:"
        ls -la
        
        # Install test function dependencies
        echo "📦 Installing dependencies..."
        npm install
        
        # Deploy test function with retries
        test_attempt=1
        test_max_attempts=5
        test_success=false
        
        while [ $test_attempt -le $test_max_attempts ] && [ "$test_success" = false ]; do
          echo "============================================"
          echo "🧪 Test function deployment attempt $test_attempt/$test_max_attempts"
          echo "============================================"
          
          set +e
          test_output=$(firebase deploy --only functions --project ${{ github.event.inputs.project_id }} --non-interactive --force 2>&1)
          test_exit_code=$?
          set -e
          
          echo "📋 Test deployment output:"
          echo "$test_output"
          echo "📋 Test exit code: $test_exit_code"
          
          if [ $test_exit_code -eq 0 ]; then
            echo "✅ Test function deployed successfully on attempt $test_attempt"
            test_success=true
          else
            echo "❌ Test function deployment failed on attempt $test_attempt"
            
            # Check for specific error patterns
            if echo "$test_output" | grep -i "compute.*engine.*api.*not.*enabled\|compute.*engine.*api.*disabled"; then
              echo "🔍 Detected Compute Engine API issue - this should be resolved now"
            elif echo "$test_output" | grep -i "permission.*denied\|access.*denied\|forbidden"; then
              echo "🔍 Detected permission issue - waiting longer for propagation"
              sleep 30
            elif echo "$test_output" | grep -i "precondition.*failed\|cannot.*update.*function.*without.*storage"; then
              echo "🔍 Detected storage/precondition issue - cleaning up and retrying"
              gcloud functions delete testFunction2 --region=europe-west2 --project=${{ github.event.inputs.project_id }} --quiet || echo "Function deletion failed"
              sleep 30
            fi
            
            if [ $test_attempt -lt $test_max_attempts ]; then
              echo "⏳ Waiting 3 seconds before retry..."
              sleep 3
            else
              echo "💥 Test function deployment failed after all attempts"
              echo "Deployment output:"
              echo "$test_output"
              exit 1
            fi
          fi
          
          test_attempt=$((test_attempt + 1))
        done
        
        echo "🎉 Test function deployment successful! Project is warmed up."
        echo "⏳ Waiting 2 seconds for project to stabilize..."
        sleep 2

    - name: Send success webhook notification
      if: success() && github.event.inputs.webhook_url != ''
      run: |
        echo "📡 Sending success webhook notification..."
        
        WEBHOOK_PAYLOAD=$(cat <<EOF
        {
          "webhookSecret": "${{ github.event.inputs.webhook_secret }}",
          "response": {
            "status": "success",
            "message": "Cloud Functions initialization completed successfully.",
            "projectId": "${{ github.event.inputs.project_id }}",
            "deploymentId": "${{ github.event.inputs.deployment_id }}",
            "repository": "dineplatform/cloud-functions-init",
            "googleAccount": "${{ github.event.inputs.google_account }}",
            "completedAt": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          },
          "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "originalWebhookUrl": "${{ github.event.inputs.original_webhook_url }}",
          "originalWebhookSecret": "${{ github.event.inputs.original_webhook_secret }}"
        }
        EOF
        )
        
        echo "Webhook payload:"
        echo "$WEBHOOK_PAYLOAD"
        
        curl -X POST "${{ github.event.inputs.webhook_url }}" \
          -H "Content-Type: application/json" \
          -H "User-Agent: GitHub-Actions-CF-Init/1.0" \
          -d "$WEBHOOK_PAYLOAD" \
          --max-time 30 \
          --retry 3 \
          --retry-delay 5 || echo "⚠️ Webhook delivery failed, but deployment was successful"

    - name: Send failure webhook notification
      if: failure() && github.event.inputs.webhook_url != ''
      run: |
        echo "📡 Sending failure webhook notification..."
        
        WEBHOOK_PAYLOAD=$(cat <<EOF
        {
          "webhookSecret": "${{ github.event.inputs.webhook_secret }}",
          "response": {
            "status": "error",
            "error": "Cloud Functions initialization failed",
            "message": "The deployment workflow failed. Check the GitHub Actions logs for details.",
            "projectId": "${{ github.event.inputs.project_id }}",
            "deploymentId": "${{ github.event.inputs.deployment_id }}",
            "repository": "dineplatform/cloud-functions-init",
            "googleAccount": "${{ github.event.inputs.google_account }}",
            "failedAt": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "workflowUrl": "https://github.com/dineplatform/cloud-functions-init/actions/runs/${{ github.run_id }}"
          },
          "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "originalWebhookUrl": "${{ github.event.inputs.original_webhook_url }}",
          "originalWebhookSecret": "${{ github.event.inputs.original_webhook_secret }}"
        }
        EOF
        )
        
        echo "Webhook payload:"
        echo "$WEBHOOK_PAYLOAD"
        
        curl -X POST "${{ github.event.inputs.webhook_url }}" \
          -H "Content-Type: application/json" \
          -H "User-Agent: GitHub-Actions-CF-Init/1.0" \
          -d "$WEBHOOK_PAYLOAD" \
          --max-time 30 \
          --retry 3 \
          --retry-delay 5 || echo "⚠️ Webhook delivery failed"